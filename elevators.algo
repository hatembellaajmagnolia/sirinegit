
//************************************
// DEFINE CONSTANTS VALUES 
//************************************
SET WeigthThreshold     :   500     //  Measure Unit : KG / Max wight that elevator can support 
SET MaxCapacity         :   10      //  Measure Unit : Person / Max person that elevator can contain


//************************************
// DEFINE GLOBAL PARAMETERS 
//************************************
INIT Emergency           :   FALSE   //  If Emergency all elevators should be evacuated  



//************************************
// Elevator_Button class
//************************************

DEFINE Elevator_Button  
    
    //************************************
    // Properties declaration
    //************************************

    INIT ID_Button      : idButton        //button number
    INIT ID_Elevator    : idelevator      //elevator 1 or 2
    INIT Status         : Status          // desactivate or activate

    //************************************
    // change statuts : set status value
    //************************************

    SEQUENCE setStatus with status      
        SET Status To status 
    END SEQUENCE

    //************************************
    // GET statuts : return status value
    //************************************

    SEQUENCE getStatus with status     
        RETURN Status 

END DEFINE


//************************************
// Elevator class
//************************************

DEFINE ELEVATOR 

    //************************************
    // Properties declaration
    //************************************

    INIT B[         //Array of Button inside the elevator
        Instantiate Elevator_Button WITH 1,idelevator,desactivate   //instantiate of the first Button 
        Instantiate Elevator_Button WITH 2,idelevator,desactivate   //instantiate of second buuton
        Instantiate Elevator_Button WITH 3,idelevator,desactivate   //instantiate of third buuton
        Instantiate Elevator_Button WITH 4,idelevator,desactivate   //instantiate of four buuton
        Instantiate Elevator_Button WITH 5,idelevator,desactivate   //instantiate of five buuton
        Instantiate Elevator_Button WITH 6,idelevator,desactivate   //instantiate of six buuton
        Instantiate Elevator_Button WITH 7,idelevator,desactivate   //instantiate of seven buuton
        Instantiate Elevator_Button WITH 8,idelevator,desactivate   //instantiate of eight buton
        Instantiate Elevator_Button WITH 9,idelevator,desactivate   //instantiate of nine buuton
        Instantiate Elevator_Button WITH 10,idelevator,desactivate  //instantiate of ten buuton
    ] 
    INIT ID_Elevator    : idelevator        //elevator 1 or 2
    INIT Direction          : "NULL"        //Possible values 'UP'/'Down'/'NULL'
    INIT DoorStatus         : 'CLOSED'      //Possible values 'CLOSED'/'OPEN'
    INIT DoorObstrcution    : 'FALSE'       //Possible values 'FALSE'/'TRUE'
    INIT requestList        : []            //List of all request made by callers inside and outside the elevator
    INIT NumberOfPerson     :   0           // Number of persons in the elevator 
    INIT Weigth             :   0           // The weigth of persons inside the elevator 
    INIT Status             :   status      //Possible values 'MOVING'/'STOPPED'/'IDLE'
    INIT CURRENT_Floor      :   0           //0 is default value



    //************************************


    // Methods declaration
    //************************************

    //**************************************************
    // move : move the elevator to reach specific floor
    //**************************************************

    SEQUENCE move with floorNumber
        if CURRENT_Floor = floorNumber THEN    
            CALL setStatus with 'STOPPED'
        else if CURRENT_Floor < floorNumber THEN    
            MOVE UP to floorNumber
            CALL setStatus with 'MOVING'
        else 
            MOVE DOWN to floorNumber
            CALL setStatus with 'MOVING'
        END IF 
        CALL setStatus with 'STOPPED'
        CURRENT_Floor = floorNumber 
    END SEQUENCE


    //**************************************************
    // openDoor : open the door of the elevator  
    //**************************************************
     
    SEQUENCE openDoor  
        OPEN DOOR               //Execute system command - Electrical 
        setDoorStatus("OPEN")
    ENDSEQUENCE 

    //**************************************************
    // closeDoor : close the door of the elevator  
    //**************************************************
     
    SEQUENCE closeDoor 
        WHILE (Weight == WeigthThreshold) OR (NumberOfPerson== MaxCapacity) OR DoorObstrcution 
            CALL openDoor
            BIP SIGNAL
        END WHILE
        CLOSE DOOR                
        setDoorStatus("CLOSED")
    ENDSEQUENCE 


    //**************************************************
    // addToRequestList : add floor to the request list 
    //**************************************************
     
    SEQUENCE addToRequestList with floorNumber 
        ADD floorNumber To requestList

    ENDSEQUENCE 

    //**************************************************
    // removeFromRequestList : remove floor from the request list 
    //**************************************************
     
    SEQUENCE removeFromRequestList with floorNumber 
         remove floorNumber from requestList
    ENDSEQUENCE 

    //**************************************************
    // sortRequestList : sort the request list 
    //**************************************************
     
    SEQUENCE sortRequestList  
        IF Elevator Direction IS GOING UP THEN
        SORT requestList FROM Lower Levels TO Upper levels
        ELSE IF Elevator Direction IS GOING DOWN THEN
        SORT requestList FROM Upper Levels TO Lower levels
        END IF
    SET requestList TO sortRequestList 
  return  sortRequestList 

END SEQUENCE
 
    ENDSEQUENCE 

    //**************************************************
    // mainElevator : open the door of the elevator  
    // Manage request list 
    //**************************************************
     
    SEQUENCE mainElevator *
        while requestList is not EMPTY and (not Emergency) 
            Call sortRequestList //sort should be done every time before treating first request : in cas of adding another floor while we treat the last request 
            call move with requestList[0] // requestList[0] is the first floor which should be reached it can be 10, 7,....
            call openDoor
            call removeFromRequestList with requestList[0]
        END WHILE
    ENDSEQUENCE

    //**************************************************
    // startElevator : Thez first time while the elevator start   
    // Manage request list 
    //**************************************************
     
    SEQUENCE startElevator with floorNumber
        call move with floorNumber
        call mainElevator
    ENDSEQUENCE

END DEFINE



//************************************
// Outside_Button class
//************************************

DEFINE Outside_Button

    //************************************
    // Properties declaration
    //************************************

    INIT Direction          :   'NULL'              //Possible values 'UP'/'Down'/'NULL'
    INIT CURRENT_Floor      :   callerposition      //floor number
    INIT Status             :   Status          // desactivate or activate
    INIT Btn[
        Instantiate Outside_Button WITH Down,10, desactivate
        Instantiate Outside_Button WITH down or up,9, desactivate                //instantiate button outside (up or down)
        Instantiate Outside_Button WITH down or up,8, desactivate
        Instantiate Outside_Button WITH down or up,7, desactivate
        Instantiate Outside_Button WITH down or up,6, desactivate
        Instantiate Outside_Button WITH down or up,5, desactivate
        Instantiate Outside_Button WITH down or up,4, desactivate
        Instantiate Outside_Button WITH down or up,3, desactivate
        Instantiate Outside_Button WITH down or up,2, desactivate
        Instantiate Outside_Button WITH down or up,1, desactivate
    ]
END DEFINE
call elevator
call find best elevator
call operate elevator
call move elevator

 
SEQUENCE CallElevator (id_direction,CURRENT_Floor)
    call setButtonS
 // The best option is the nearest and already moving elevator that has the same direction that the current direction
    // Verify if the request is on the elevators way, otherwise the elevator will just continue its way ignoring this call
    // If there is no elevators moving at the same direction as the current direction, the nearest idle elevator is selected

SEQUENCE findElevator USING CURRENT_Floor AND Direction AND ID_Elevator OF Shaft
        SET ActiveID_Elevator TO EMPTY
        SET IdleID_Elevator TO EMPTY

        FOR EACH elevator1 IN ID_Elevator
            IF (elevator1 IS NOT "IDLE" AND elevator1 status IS EQUAL TO currentDirection) THEN  //if the elevator is active and has the same direction
                IF (elevator1 status IS "UP" AND elevator1 floor IS < CURRENT_Floor OR elevator1 status IS "DOWN" AND elevator1 floor IS > CURRENT_Floor) THEN
                    ADD elevator1 TO ActiveID_Elevator
                ENDIF
            ELSE 
                ADD elevator1 TO IdleID_Elevator
            ENDIF
        ENDFOR

        IF (ActiveID_Elevator IS not EMPTY) THEN
            CALL findNearestElevator USING CURRENT_Floor AND ActiveID_Elevator
        ELSE 
            CALL findNearestElevator USING CURRENT_Floor AND IdleID_Elevator         

        RETURN bestElevator 
    ENDSEQUENCE

SEQUENCE findNearestElevator USING ID_Elevator
        SET bestElevator TO first elevator (elevator1) OF ID_Elevator     //lets take the first element of the array and compare it to each elevator1 of the array  
        SET bestGap = |floor OF bestElevator - CURRENT_Floor|
        FOR EACH elevator1 IN ID_Elevator 
            IF (|floor OF elevator1 - CURRENT_Floor| <bestGap) THEN
                SET bestElevator TO elevator1           
            ENDIF
        ENDFOR
        RETURN bestElevator 
    ENDSEQUENCE

ENDDEFINE
